<header>
  <div class="right">
    <img src="/images/network.png" />
  </div>
  
  <h1>
    <small>Trabalho de Redes II:</small> Proxy Pinger
  </h1>
  
  <hr />
  
  <h3>
    Fernando Cardoso Coelho
    <div class="right">
      GRR20082084
    </div>
  </h3>
  <h3>
    Luan Haddad Ricardo dos Santos
    <div class="right">
      GRR20083152
    </div>
  </h3>
  
  <hr />
</header>

<section>
  <article>
    <header>
      <h2>
        Introdução
      </h2>
    </header>
    <p>
      O trabalho foi feito usando <a href="http://ruby-lang.org">Ruby</a> e sua biblioteca de <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/index.html">sockets</a> para comunicação usando <strong>TCP</strong> e <a href="http://www.ruby-doc.org/core-1.9.3/Thread.html">Thread</a> para gerenciar conexões concorrentes, por fim o comando <a href="http://linux.about.com/od/commands/l/blcmdl8_ping.htm">ping</a> do Unix foi a implementação do ICMP escolhida. Utilizamos orientação a objetos para organizar o código.
    </p>
    <p>
      <em>Resumindo</em>:
      <ul>
        <li><a href="http://ruby-lang.org">Ruby</a></li>
        <li><strong>TCP</strong></li>
        <li><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/index.html">socket</a></li>
        <li><a href="http://www.ruby-doc.org/core-1.9.3/Thread.html">Thread</a></li>
        <li><a href="http://linux.about.com/od/commands/l/blcmdl8_ping.htm">ping</a></li>
      </ul>
    </p>
  </article>
  
  <article>
    <header>
      <h2>
        O que foi feito
      </h2>
      <div class="center">
        <img src="/images/flow.png" />
        <p class="legend">
          <strong>Figura 1:</strong> Fluxo de execução do ProxyPinger.<br />
          <em>Em preto</em>: requisições de ping vão.<br />
          <em>Em azul</em>: respostas voltam.<br />
          <em>Em verde</em>: ping propriamente dito.<br />
        </p>
      </div>
    </header>
    <p>
      Fizemos uma biblioteca proxy_pinger que contém uma única classe ProxyPinger. Essa classe é responsável por ser tanto cliente como servidor no sistema desenvolvido.
    </p>
    <p>
      Cada instância de ProxyPinger pode possuir um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPSocket.html">TCPSocket</a> (@nserver) e/ou um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPServer.html">TCPServer</a> (@server).
    </p>
    <p>
      Os proxies intermediários possuem tanto o <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPSocket.html">TCPSocket</a> quanto o <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPServer.html">TCPServer</a>. O <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPServer.html">TCPServer</a> escuta clientes que possívelmente requisitarão pings, respondendo-as, enquanto o <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPSocket.html">TCPSocket</a> repassa requisições de ping para os servidores subsequentes na corrente e recebe resposta do mesmo para repassar ao anterior.
    </p>
    <p>
      Um cliente (ou seja, o primeiro proxy pinger na corrente) possui apenas um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPSocket.html">TCPSocket</a>, já que ele não escuta nenhum outro cliente não há necessidade de criarmos um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPServer.html">TCPServer</a> para tal responsabilidade.
    </p>
    <p>
      Chamamos de servidor o último pinger da corrente, ele é responsável agora por executar o ping propriamente dito, utizando o <a href="http://linux.about.com/od/commands/l/blcmdl8_ping.htm">ping</a> do unix. Não possui um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPSocket.html">TCPSocket</a>, apenas um <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/socket/rdoc/TCPServer.html">TCPServer</a> no qual recebe requisições de ping e as responde.
    </p>
    
    <h3>Biblioteca:</h3>

    <div class="code_block">
      <div class="code_header">
        lib/proxy_pinger.rb
        <div class="right">
          <a href="/code/lib/proxy_pinger.rb.txt">versão texto puro</a>
        </div>
      </div>
      <%= CodeRay.scan_file('lib/proxy_pinger.rb').html.div %>
    </div>
    
    <p>
      Com isto foi implementado um programa de linha de comando fazendo uso da biblioteca. A interface poderia ter sido qualquer uma, GTK, Qt, web, ou linha de comando. Para evitar de "sujar" nosso código com detalhes de implementação de interface resolvemos exemplificar com um programa mais simples. Linha de comando. Além disso, evitando dependências extras o programa ficou mais portável.
    </p>
    <p>
      O programa pode receber três parâmetros: porta do TCPServer, host do próximo servidor na corrente e porta do próximo servidor na corrente. Serve tanto como cliente ou servidor, dependendo dos parâmetros passados ele se comportará como tal. O proxy_pinger é genérico, não houve necessidade de criar um executável para cliente e outro para servidor.
    </p>
    <p>
      Seu código é bem simples, e pode ser compreendido pelos comentários.
    </p>
    
    <h3>Programa:</h3>

    <div class="code_block">
      <div class="code_header">
        bin/proxy_pinger.rb
        <div class="right">
          <a href="/code/bin/proxy_pinger.rb.txt">versão texto puro</a>
        </div>
      </div>
      <%= CodeRay.scan_file('bin/proxy_pinger.rb').html.div %>
    </div>

    <p>
      Foi ainda criado um simulador, para testes. Funciona exatamente a mesma coisa que o programa principal, mas criando vários proxy pingers num mesmo host. Os proxy pingers se conectam entre si, e sempre fazem ping ao host "google.com".
    </p>
    
    <p>
      O programa simulador foi criado exclusivamente para testes e não faz parte do código do trabalho. Foi utilizado para exemplificar o funcionamento e unificar os logs no relatório. Por isso, não foi comentado, apesar de não ser complexo para conhecedores da linguagem Ruby.
    </p>

    <h2>Simulator:</h2>

    <div class="code_block">
      <div class="code_header">
        bin/simulator.rb
        
        <div class="right">
          <a href="/code/bin/simulator.rb.txt">versão texto puro</a>
        </div>
      </div>
      <%= CodeRay.scan_file('bin/simulator.rb').html.div %>
    </div>

    <p>
      A saída de todos os servidores (20000 a 20005) segue abaixo.
    </p>
    <p>
      Os logs são simples, cada servidor é identificado pela sua porta entre parenteses. As ações realizadas por cada um estão explicitadas ao lado.
    </p>
    
    <div class="code_block">
      <div class="code_header">
        Simulator output
      </div>
      <div class="CodeRay">
        <div class="code">
          <pre>
$ ruby bin/simulator.rb
starting port 20005
(20005) server up
starting port 20004
(20004) server up
connecting to server on 127.0.0.1:20005
starting port 20003
(20003) server up
connecting to server on 127.0.0.1:20004
starting port 20002
(20002) server up
connecting to server on 127.0.0.1:20003
starting port 20001
(20001) server up
connecting to server on 127.0.0.1:20002
starting port 20000
(20000) server up
connecting to server on 127.0.0.1:20001
connecting to server on 127.0.0.1:20000
(20001) client connected
(20005) client connected
(20003) client connected
(20002) client connected
(20004) client connected
(20000) client connected
(20000) got host 'google.com'
(20000) sending to next server
(20001) got host 'google.com'
(20001) sending to next server
(20002) got host 'google.com'
(20002) sending to next server
(20003) got host 'google.com'
(20003) sending to next server
(20004) got host 'google.com'
(20004) sending to next server
(20005) got host 'google.com'
(20005) pinging host 'google.com'
PING google.com (74.125.234.115): 56 data bytes
64 bytes from 74.125.234.115: icmp_seq=0 ttl=54 time=17.272 ms
64 bytes from 74.125.234.115: icmp_seq=1 ttl=54 time=15.852 ms
64 bytes from 74.125.234.115: icmp_seq=2 ttl=54 time=16.265 ms

--- google.com ping statistics ---
3 packets transmitted, 3 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 15.852/16.463/17.272/0.596 ms
(20005) got result true
(20004) got result google.com is up
(20003) got result google.com is up
(20002) got result google.com is up
(20001) got result google.com is up
(20000) got result google.com is up
(client) google.com is up
          </pre>
        </div>
      </div>
    </div>
  </article>
</section>

<footer>
  <header>
    <h2>
      Notas basicamente irrelevantes
    </h2>
  </header>
  <article>
    <p>
      O código de todo o trabalho e o website está hospedado no <a href="http://github.com/luan/proxy-pinger">github</a>.
    </p>
    <p>
      Esta página foi construída utilizando o microframework web para Ruby <a href="http://www.sinatrarb.com/">Sinatra</a> e está hospedado gratuitamente pelo <a href"http://heroku.com">Heroku</a>. O highlight de código é feito pela RubyGem <a href="https://github.com/rubychan/coderay">CodeRay</a> e o layout foi pego emprestado do <a href="http://railscasts.com">Ryan Bates</a> (cujo código é opensource <a href="https://github.com/ryanb/railscasts">aqui</a>) com algumas modificações.
    </p>
    <p>
      O diagrama de fluxo (<strong>Figura 1</strong>) foi desenhado usando o <a href="http://github.com/grape-editor/grape">Grape</a> (trabalho de graduação do <a href="http://luansantos.com/">Luan Haddad Ricardo dos Santos</a> e do <a href="http://jonatasteixeira.com/">Jonatas Teixeira</a>).
    </p>
    <p>
      O subdomínio redes.fute.ba de <a href="http://www.fute.ba">fute.ba</a> foi cedido pelo time do fute.ba (que no caso somos nós mesmos).
    </p>
    
    <p class="copy">
      Dezembro, 2011 - Universidade Federal do Paraná
    </a>
  </article>
</footer>
